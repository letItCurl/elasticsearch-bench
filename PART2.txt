# custom analyser

PUT /analyser_test_2
{
  "settings": {
    "analysis": {
      "filter": {
        "french_stop": {
          "type": "stop",
          "stopwords": "_french_"
        }
      }, 
      "char_filter": {},
      "tokenizer": {}, 
     "analyzer": {
       "my_custom_analyser": {
         "type": "custom",
         "char_filter": ["html_strip"],
         "tokenizer": "standard",
         "filter": [
           "lowercase",
           "french_stop",
           "asciifolding"
           ]
       }
     } 
    }
  }
}

PUT /analyser_test
{
  "settings": {
    "analysis": {
     "analyzer": {
       "my_custom_analyser": {
         "type": "custom",
         "char_filter": ["html_strip"],
         "tokenizer": "standard",
         "filter": [
           "lowercase",
           "stop",
           "asciifolding"
           ]
       }
     } 
    }
  }
}

POST /_analyze
{
  "char_filter": ["html_strip"], 
  "text": "<h1> hello world </h1>"
}

POST /analyser_test/_analyze
{
  "analyzer": "my_custom_analyser", 
  "text": "<h1> the hello world àiîî </h1>"
}

POST /dyn-temp_test/_doc/2
{
  "in_stock": "56"
}

GET /dyn-temp_test/_doc/1

GET /dyn-temp_test/_mapping

PUT /dyn-temp_test
{
  "mappings": {
    "dynamic_templates": [
        {
          "integers": {
            "match_mapping_type": "long",
            "mapping": {
              "type": "integer"
            }
          }
        }
      ]
  }
}

# "dynamic": "strict" => if field is not mapped, then it will be rejected

# if in the creation we add mappings, merge is appliyed and the creation is winner

PUT /access-logs-2020-01-01
GET /access-logs-2020-01-01
PUT /_template/access-logs
{
  "index_patterns": ["access-logs-*"],
  "settings": {
    "number_of_shards": 2,
    "index.mapping.coerce": false
  }, 
  "mappings": {
    "properties": {
      "@time":{
        "type": "date"
      },
      "url.original": {
        "type": "keyword"
      },
      "http.request.referrer": {
        "type": "keyword"
      },
      "http.response.status_code": {
        "type": "long"
      }
    }
  }
}

GET /multi_field_test/_search
{
  "query": {
    "match": {
      "ingr": "pates"
    }
  }
}

GET /multi_field_test/_search
{
  "query": {
    "term": {
      "ingr.keyword": "pates"
    }
  }
}

POST /multi_field_test/_doc
{
  "desc": "bla bla pates",
  "ingr": ["pates", "salade",  "tomate"]
}

PUT /multi_field_test
{
  "mappings": {
    "properties": {
      "desc": {
        "type": "text"
      },
      "ingr": {
        "type": "text",
        "fields": {
            "keyword": {
            "type": "keyword"
          }
        }
      }
    }
  }
}

# an alias is just a name change

# WHEN ADDIN PROPS: just properties
PUT /reviews/_mapping
{
      "properties" : {
        "comment" : {
          "type" : "alias",
          "path" : "content"
        }
      }
}

# in reindexing api we can add query in source

# this changes the original values
# so that we receive the expected values in the new index
POST /_reindex
{
  "source": {
    "index": "reviews"
  },
  "dest": {
    "index": "review_new"
  },
  "script": {
    "source": """
      if (ctx._source.product_id != null) {
        ctx._source.product_id = ctx._source.product_id.toString();
      }
    """
  }
}

POST /review_new/_delete_by_query
{
  "query": {
    "match_all": {}
  }
}

GET /review_new/_search
{
  "query": {
    "match_all": {}
  }
}

POST /_reindex
{
  "source": {
    "index": "reviews"
  },
  "dest": {
    "index": "review_new"
  }
}

PUT /review_new
{
  "mappings" : {
      "properties" : {
        "author" : {
          "properties" : {
            "email" : {
              "type" : "keyword"
            },
            "first_name" : {
              "type" : "text"
            },
            "last_name" : {
              "type" : "text"
            }
          }
        },
        "content" : {
          "type" : "text"
        },
        "created_at" : {
          "type" : "date"
        },
        "product_id" : {
          "type" : "keyword"
        },
        "ratings" : {
          "type" : "float"
        }
      }
    }
}

GET /reviews/_mapping

# /!\ mapping does not make fields required /!\ 

# time stored is not the data used to treat time in elastic shearch
POST /reviews/_doc/2
{
  "ratings": 4.5,
  "content": "yes review",
  "product_id": 123,
  "created_at": "2015-03-27",
  "author": {
    "first_name": "hello2",
    "last_name": "h2ello",
    "email": "hello@mail.com"
  }
}

POST /reviews/_doc/3
{
  "ratings": 4.5,
  "content": "yes review",
  "product_id": 123,
  "created_at": "2015-03-27T13:05:45Z",
  "author": {
    "first_name": "hello2",
    "last_name": "h2ello",
    "email": "hello@mail.com"
  }
}

POST /reviews/_doc/4
{
  "ratings": 4.5,
  "content": "yes review",
  "product_id": 123,
  "created_at": "2015-03-27T09:05:45+01:00",
  "author": {
    "first_name": "hello2",
    "last_name": "h2ello",
    "email": "hello@mail.com"
  }
}

# if useing unix timestamp: *1000
POST /reviews/_doc/5
{
  "ratings": 4.5,
  "content": "yes review",
  "product_id": 123,
  "created_at": 1436011284000,
  "author": {
    "first_name": "hello2",
    "last_name": "h2ello",
    "email": "hello@mail.com"
  }
}

GET /reviews/_search
{
  "query": {
    "match_all": {}
  }
}

# adding mapping
PUT /reviews/_mapping
{
  "properties": {
    "created_at": {"type": "date"}
  }
}

GET /reviews/_mapping/field/created_at

# create mappings with dot notation
PUT /reviews_2
{
  "mappings": {
    "properties": {
      "ratings": { "type": "float" },
      "content": { "type": "text" },
      "product_id": { "type": "integer"},
      "author.first_name":  { "type": "text" },
      "author.last_name":  { "type": "text" },
      "author.email":  { "type": "keyword" }
    }
  }
}

GET /reviews_2/_mapping

# fetch mappings
GET /reviews/_mapping

# find per field
GET /reviews/_mapping/field/content

# find nested obj
GET /reviews/_mapping/field/author.email

POST /reviews/_doc/1
{
  "ratings": 4.5,
  "content": "yes content",
  "product_id": 123,
  "author": {
    "first_name": "hello",
    "last_name": "hello",
    "email": "hello@mail.com"
  }
}

DELETE /reviews

GET /reviews

GET /reviews/_search
{
  "query": {
    "match_all": {}
  }
}

# create index with the related interface (mappings)
PUT /reviews
{
  "mappings": {
    "properties": {
      "ratings": { "type": "float" },
      "content": { "type": "text" },
      "product_id": { "type": "integer"},
      "author": {
        "properties": {
          "first_name": { "type": "text" },
          "last_name": { "type": "text" },
          "email": { "type": "keyword" }
        }
      }
    }
  }
}

# use analyze api to compose with char_filter->tokenizer->filtert
POST /_analyze
{
 "text": "As far as I know - this happens due to network adapter type. (Don't know why, just my experiance...)",
 "char_filter": [],
 "tokenizer": "standard",
 "filter": ["lowercase"]
}

POST /_analyze
{
 "text": "As far as I know - this happens due to network adapter type. (Don't know why, just my experiance...)",
 "analyzer": "standard"
}